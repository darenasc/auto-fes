{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automated File Exploration System","text":"<p>Automated exploration of files with structured data on them (<code>csv</code>, <code>txt</code>,  <code>Excel</code>) in a folder structure to extract metadata and potential usage of  information.</p> <p>If you have a bunch of sctructured data in plain files, this library is for you.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -q git+https://github.com/darenasc/auto-fes.git\npip install -q ydata_profiling sweetviz # to make profiling tools work\n</code></pre>"},{"location":"#how-to-use-it","title":"How to use it","text":""},{"location":"#command-line","title":"Command line","text":"<pre><code>afes --help\n\nafes explore --help\nafes explore &lt;PATH_TO_FILES_TO_EXPLORE&gt;\n\nafes generate --help\nafes generate &lt;PATH_TO_FILES_TO_EXPLORE&gt; # or\nafes generate &lt;PATH_TO_FILES_TO_EXPLORE&gt; &lt;OUTPUT_FILE_WITH_CODE&gt;\n\nafes profile --help\nafes profile &lt;PATH_TO_FILES_TO_EXPLORE&gt; # or\nafes profile &lt;PATH_TO_FILES_TO_EXPLORE&gt; &lt;OUTPUTS_PATH_FOR_REPORTS&gt; # or\nafes profile &lt;PATH_TO_FILES_TO_EXPLORE&gt; &lt;OUTPUTS_PATH_FOR_REPORTS&gt; &lt;PROFILE_TOOL&gt; # 'ydata-profiling' or 'sweetviz'\n</code></pre>"},{"location":"#python-scripts-and-notebooks","title":"Python scripts and notebooks","text":"<pre><code>from afes import afe\n\n# Path to folder with files to be explored\nTARGET_FOLDER = \"&lt;PATH_TO_FILES_TO_EXPLORE&gt;\"\nOUTPUT_FOLDER = \"&lt;PATH_TO_OUTPUTS&gt;\"\n\n# Run exploration on the files\ndf_files = afe.explore_files(TARGET_FOLDER)\n\n# Generate pandas code to load the files\nafe.generate_code(df_files)\n\n# Run profiling on each file\nafe.profile_files(df_files, profile_tool=\"ydata-profiling\", output_path=OUTPUT_FOLDER)\nafe.profile_files(df_files, profile_tool=\"sweetviz\", output_path=OUTPUT_FOLDER)\n</code></pre>"},{"location":"#what-can-you-do-with-afes","title":"What can you do with AFES","text":"<ul> <li>Explore</li> <li>Generate code</li> <li>Profile</li> </ul>"},{"location":"#explore","title":"Explore","text":"<pre><code>from afes import afe\n\n# Path to folder with files to be explored\nTARGET_FOLDER = \"&lt;PATH_TO_FILES_TO_EXPLORE&gt;\"\n\n# Run exploration on the files\ndf_files = afe.explore(TARGET_FOLDER)\ndf_files\n</code></pre> <p>The <code>df_files</code> dataframe will look like the following table, depending on the  files you plan to explore.</p> <pre><code>|      | path                                              | name                     | extension |    size | human_readable |  rows | separator |\n| ---: | :------------------------------------------------ | :----------------------- | :-------- | ------: | :------------- | ----: | :-------- |\n|    1 | /content/sample_data/auto_mpg.csv                 | auto_mpg                 | .csv      |   20854 | 20.4 KiB       |   399 | comma     |\n|    2 | /content/sample_data/car_evaluation.csv           | car_evaluation           | .csv      |   51916 | 50.7 KiB       |  1729 | comma     |\n|    3 | /content/sample_data/iris.csv                     | iris                     | .csv      |    4606 | 4.5 KiB        |   151 | comma     |\n|    4 | /content/sample_data/wine_quality.csv             | wine_quality             | .csv      |  414831 | 405.1 KiB      |  6498 | comma     |\n|    5 | /content/sample_data/california_housing_test.csv  | california_housing_test  | .csv      |  301141 | 294.1 KiB      |  3001 | comma     |\n|    6 | /content/sample_data/california_housing_train.csv | california_housing_train | .csv      | 1706430 | 1.6 MiB        | 17001 | comma     |\n</code></pre>"},{"location":"#generate-code","title":"Generate code","text":"<p>Using the dataframe <code>df_files</code> generated in the explore phase, you can generate  working python pandas code to be used. </p> <p>the function <code>generate()</code> will generate python code to load the files using  <code>pandas</code>.</p> <pre><code>from afes import afe\n\n# Path to folder with files to be explored\nTARGET_FOLDER = \"&lt;PATH_TO_FILES_TO_EXPLORE&gt;\"\nOUTPUT_FOLDER = \"&lt;PATH_TO_OUTPUTS&gt;\"\n\ndf_files = afe.explore(TARGET_FOLDER)\nafe.generate(df_files)\n</code></pre> <p>The generated code will look like this:</p> <pre><code>### Start of the code ###\nimport pandas as pd\n\ndf_auto_mpg = pd.read_csv('/content/sample_data/auto_mpg.csv', sep = ',')\ndf_car_evaluation = pd.read_csv('/content/sample_data/car_evaluation.csv', sep = ',')\ndf_iris = pd.read_csv('/content/sample_data/iris.csv', sep = ',')\ndf_wine_quality = pd.read_csv('/content/sample_data/wine_quality.csv', sep = ',')\ndf_california_housing_test = pd.read_csv('/content/sample_data/california_housing_test.csv', sep = ',')\ndf_california_housing_train = pd.read_csv('/content/sample_data/california_housing_train.csv', sep = ',')\n\n### End of the code ###\n\n\"code.txt\" has the generated Python code to load the files.\n</code></pre> <p>By default the code is printed to the standard output but also written by  default to the <code>./code.txt</code> file.</p> <p>Note: you can replace the <code>.txt</code>  extension by <code>.py</code> to make it a working  Python script.</p>"},{"location":"#profile","title":"Profile","text":"<p>Using the dataframe <code>df_files</code> generated in the explore phase, the function  <code>profile(df_files)</code> will automatically load and profiline the files using  ydata-profiling or  sweetviz.</p> <pre><code># Path to folder with files to be explored\nTARGET_FOLDER = \"&lt;PATH_TO_FILES_TO_EXPLORE&gt;\"\nOUTPUT_FOLDER = \"&lt;PATH_TO_OUTPUTS&gt;\"\n\n# Run exploration on the files\ndf_files = afe.explore(TARGET_FOLDER)\n\nafe.profile(df_files, profile_tool=\"ydata-profiling\", output_path=OUTPUT_FOLDER) # or\nafe.profile(df_files, profile_tool=\"sweetviz\", output_path=OUTPUT_FOLDER)\n</code></pre> <p>By default, it will process the files using <code>ydata-profiling</code> by size order  starting with the smallest file. It will create the reports and export them in  HTML format. It will store the reports in the same directory where the code is  running or it save them in a given directory with the  <code>output_path  = '&lt;YOUR_OUTPUT_PATH&gt;'</code> argument.</p>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>Open an issue to request more functionalities or feedback.</li> </ul>"},{"location":"AFES/","title":"AFES","text":""},{"location":"AFES/#src.afes.afe.explore_files","title":"<code>explore_files(path)</code>","text":"<p>Return a dataframe with all the files.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path the file or to the directory with files.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame with description of the files.</p> Source code in <code>src/afes/afe.py</code> <pre><code>def explore_files(path: str | Path) -&gt; pd.DataFrame:\n    \"\"\"Return a dataframe with all the files.\n\n    Args:\n        path (str | Path): Path the file or to the directory with files.\n\n    Returns:\n        pd.DataFrame: DataFrame with description of the files.\n    \"\"\"\n    path = Path(path)\n    all_files = _get_files(path)\n    df = _get_descriptions(all_files=all_files)\n\n    # Determine the separator\n    df[\"separator\"] = None\n    pbar = tqdm(range(len(df)), total=len(df))\n    for i in pbar:\n        pbar.set_description(f\"{df.iloc[i]['name']} ({df.iloc[i]['rows']:,} records)\")\n        if df.iloc[i][\"extension\"] in PLAIN_FORMATS:\n            sep = get_separator(df.iloc[i][\"path\"])\n            df.at[i, \"separator\"] = sep\n\n    return df\n</code></pre>"},{"location":"AFES/#src.afes.afe.generate_code","title":"<code>generate_code(df, python_file='code.txt', verbose=True)</code>","text":"<p>Generate pandas code to load the files.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame with the explored files.</p> required <code>python_file</code> <code>str</code> <p>Name of the file to save the code. Defaults to \"code.txt\".</p> <code>'code.txt'</code> <code>verbose</code> <code>bool</code> <p>Flag to print the code. Defaults to True.</p> <code>True</code> Source code in <code>src/afes/afe.py</code> <pre><code>def generate_code(\n    df: pd.DataFrame,\n    python_file: str = \"code.txt\",\n    verbose: bool = True,\n):\n    \"\"\"Generate pandas code to load the files.\n\n    Args:\n        df (pd.DataFrame): DataFrame with the explored files.\n        python_file (str, optional): Name of the file to save the code.\n            Defaults to \"code.txt\".\n        verbose (bool, optional): Flag to print the code. Defaults to True.\n    \"\"\"\n    generate_pandas_code(df, python_file=python_file, verbose=verbose)\n</code></pre>"},{"location":"AFES/#src.afes.afe.profile_files","title":"<code>profile_files(df, output_path='.', profile_tool='ydata-profiling')</code>","text":"<p>Profile the structured data.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame with the files to be profiled.</p> required <code>output_path</code> <code>str | Path</code> <p>Folder to save the HTML reports. Defaults to \".\".</p> <code>'.'</code> <code>profile_tool</code> <code>str</code> <p>Select which profiling too to use. Defaults to \"ydata-profiling\".</p> <code>'ydata-profiling'</code> Source code in <code>src/afes/afe.py</code> <pre><code>def profile_files(\n    df: pd.DataFrame,\n    output_path: str | Path = \".\",\n    profile_tool: str = \"ydata-profiling\",\n):\n    \"\"\"Profile the structured data.\n\n    Args:\n        df (pd.DataFrame): DataFrame with the files to be profiled.\n        output_path (str | Path, optional): Folder to save the HTML reports.\n            Defaults to \".\".\n        profile_tool (str, optional): Select which profiling too to use.\n            Defaults to \"ydata-profiling\".\n    \"\"\"\n    output_path = Path(output_path)\n    output_path.mkdir(parents=True, exist_ok=True)\n    df.sort_values(by=\"size\", inplace=True)\n    print(\n        f\"Profiling files with {profile_tool} and generating reports in folder {output_path}\"\n    )\n    pbar = tqdm(df.iterrows(), total=len(df))\n    for _, r in pbar:\n        pbar.set_description(f\"Profiling {r['name']} ({r['rows']:,} records)\")\n        if r.rows &gt; 0:\n            df_to_profile = load_file_with_pandas(\n                file_path=r[\"path\"],\n                file_name=r[\"name\"],\n                extension=r[\"extension\"],\n                sep=r[\"separator\"],\n            )\n            if profile_tool == \"ydata-profiling\":\n                profile_with_ydata_profiling(\n                    output_path=output_path,\n                    df_to_profile=df_to_profile,\n                    file_name=r[\"name\"],\n                    file_size=r[\"size\"],\n                )\n            elif profile_tool == \"sweetviz\":\n                profile_with_sweetviz(\n                    df_to_profile=df_to_profile,\n                    output_path=output_path,\n                    file_name=r[\"name\"],\n                )\n\n    print(f'\\nCheck out all the reports in \"{output_path.resolve()}\"\\n')\n    return\n</code></pre>"},{"location":"generate/","title":"Generate","text":""},{"location":"generate/#src.afes.generate.generate_code","title":"<code>generate_code(file_path, file_name, extension, sep=None, prefix='df_')</code>","text":"<p>This function returns generated python code to load the files to memory using pandas.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Folder to read the file.</p> required <code>file_name</code> <code>str</code> <p>File name.</p> required <code>extension</code> <code>str</code> <p>Extension of the file.</p> required <code>sep</code> <code>str | None</code> <p>Separator used in the plain file. Defaults to None.</p> <code>None</code> <code>prefix</code> <code>str</code> <p>Prefix to name the dataframes. Defaults to \"df_\".</p> <code>'df_'</code> Source code in <code>src/afes/generate.py</code> <pre><code>def generate_code(\n    file_path: str, file_name: str, extension: str, sep: str | None = None, prefix=\"df_\"\n):\n    \"\"\"This function returns generated python code to load the files to memory\n    using pandas.\n\n    Args:\n        file_path (str): Folder to read the file.\n        file_name (str): File name.\n        extension (str): Extension of the file.\n        sep (str | None, optional): Separator used in the plain file. Defaults to None.\n        prefix (str, optional): Prefix to name the dataframes. Defaults to \"df_\".\n    \"\"\"\n\n    def get_separator_char(sep):\n        if sep == \"space\":\n            separator = \" \"\n        elif sep == \"tab\":\n            separator = \"\\\\t\"\n        elif sep == \"semi_colon\":\n            separator = \";\"\n        elif sep == \"comma\":\n            separator = \",\"\n        elif sep == \"pipe\":\n            separator = \"|\"\n        else:\n            separator = \",\"\n        return separator\n\n    df_name = (\n        file_name.split(\".\")[0].replace(\" \", \"_\").replace(\"-\", \"_\").replace(\",\", \"_\")\n    )\n    if extension in PLAIN_FORMATS:\n        separator = get_separator_char(sep)\n        code = (\n            f\"\"\"{prefix}{df_name} = pd.read_csv('{file_path}', sep = '{separator}')\\n\"\"\"\n        )\n        return code\n    elif extension in [\".xlsx\", \".xls\"]:\n        excel_name = Path(file_path).name.split(\".\")[0]\n        excel_name += \"_\" + file_name\n        code = \"\"\"\"\"\"\n        excel_name = excel_name.replace(\" \", \"_\").replace(\"-\", \"_\").replace(\",\", \"_\")\n        code = f\"\"\"{prefix}{excel_name} = pd.read_excel('{file_path}', sheet_name = '{file_name}')\\n\"\"\"\n        return code\n    else:\n        return \"\"\n</code></pre>"},{"location":"generate/#src.afes.generate.generate_pandas_code","title":"<code>generate_pandas_code(df, verbose=True, python_file='code.txt')</code>","text":"<p>This functions receives the dataframe generated by <code>explore()</code> and generates pandas code to read each file. It writes a <code>code.txt</code> file with the scripts. The verbose option is to print the code to the standard output.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame with description of the files.</p> required <code>verbose</code> <code>bool</code> <p>[Optional (default: True)] flag to print in the shell the code generated.</p> <code>True</code> <code>python_file</code> <code>str</code> <p>[Optional (default: \"code.txt\")] File name for output of the code generated.</p> <code>'code.txt'</code> Source code in <code>src/afes/generate.py</code> <pre><code>def generate_pandas_code(\n    df: pd.DataFrame, verbose: bool = True, python_file: str = \"code.txt\"\n) -&gt; None:\n    \"\"\"This functions receives the dataframe generated by `explore()` and\n    generates pandas code to read each file.\n    It writes a `code.txt` file with the scripts.\n    The verbose option is to print the code to the standard output.\n\n    Args:\n        df (pd.DataFrame): DataFrame with description of the files.\n        verbose (bool): [Optional (default: True)] flag to print in the shell\n            the code generated.\n        python_file (str): [Optional (default: \"code.txt\")] File name for output\n            of the code generated.\n    \"\"\"\n    print(f'Generating python code and saving it to \"{python_file}\"')\n    code = \"\"\"import pandas as pd\\n\\n\"\"\"\n    for i, r in tqdm(df.iterrows(), total=len(df)):\n        if r.rows &gt; 0:\n            code += generate_code(r.path, r[\"name\"], r.extension, sep=r.separator)\n\n    with open(python_file, \"w\") as f:\n        f.write(code)\n    if verbose:\n        print(\"### Start of the code ###\")\n        print(code)\n        print(\"### End of the code ###\")\n\n    print(f'\\n\"{python_file}\" has the generated Python code to load the files.\\n')\n</code></pre>"},{"location":"profile/","title":"Profile","text":""},{"location":"profile/#src.afes.profile.load_file_with_pandas","title":"<code>load_file_with_pandas(file_path, file_name, extension, sep=None)</code>","text":"<p>Read data from file using pandas.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Folder where the structure data is.</p> required <code>file_name</code> <code>str</code> <p>Name of the file.</p> required <code>extension</code> <code>str</code> <p>Extension of the file.</p> required <code>sep</code> <code>str | None</code> <p>Separator of the plain text file.. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame with the data read.</p> Source code in <code>src/afes/profile.py</code> <pre><code>def load_file_with_pandas(\n    file_path: str, file_name: str, extension: str, sep: str | None = None\n) -&gt; pd.DataFrame:\n    \"\"\"Read data from file using pandas.\n\n    Args:\n        file_path (str): Folder where the structure data is.\n        file_name (str): Name of the file.\n        extension (str): Extension of the file.\n        sep (str | None, optional): Separator of the plain text file.. Defaults\n            to None.\n\n    Returns:\n        pd.DataFrame: DataFrame with the data read.\n    \"\"\"\n    try:\n        if extension in PLAIN_FORMATS:\n            separator = _get_separator_char(sep)\n            df = pd.read_csv(file_path, sep=separator)\n            return df\n        elif extension in [\".xlsx\", \".xls\"]:\n            excel_name = Path(file_path).name\n            excel_name += \"_\" + file_name\n            df = pd.read_excel(file_path, sheet_name=file_name)\n            return df\n        else:\n            return\n    except Exception as e:\n        print(e)\n        print(f\"Error with {file_path}\")\n        return\n</code></pre>"},{"location":"profile/#src.afes.profile.profile_with_sweetviz","title":"<code>profile_with_sweetviz(df_to_profile, file_name, output_path='.')</code>","text":"<p>Generate exploratory report using sweetviz</p> <p>Parameters:</p> Name Type Description Default <code>df_to_profile</code> <code>DataFrame</code> <p>Data to be profiled.</p> required <code>file_name</code> <code>str</code> <p>Name of the file.</p> required <code>output_path</code> <code>str | Path</code> <p>Folder to save the HTML report. Defaults to \".\".</p> <code>'.'</code> Source code in <code>src/afes/profile.py</code> <pre><code>def profile_with_sweetviz(\n    df_to_profile: pd.DataFrame, file_name: str, output_path: str | Path = \".\"\n):\n    \"\"\"Generate exploratory report using sweetviz\n\n    Args:\n        df_to_profile (pd.DataFrame): Data to be profiled.\n        file_name (str): Name of the file.\n        output_path (str | Path, optional): Folder to save the HTML report.\n            Defaults to \".\".\n    \"\"\"\n    import sweetviz as sv\n\n    output_path = Path(output_path)\n\n    my_report = sv.analyze(df_to_profile)\n    my_report.show_html(\n        filepath=output_path / f\"{file_name}_sweetviz.html\", open_browser=False\n    )\n</code></pre>"},{"location":"profile/#src.afes.profile.profile_with_ydata_profiling","title":"<code>profile_with_ydata_profiling(df_to_profile, output_path, file_name, file_size)</code>","text":"<p>Profile dataframe using ydata-profiling and saves ther report to disk.</p> <p>Parameters:</p> Name Type Description Default <code>df_to_profile</code> <code>DataFrame</code> <p>Data to be profiled.</p> required <code>output_path</code> <code>str | Path</code> <p>Folder to save the report.</p> required <code>file_name</code> <code>str</code> <p>File name.</p> required <code>file_size</code> <code>int</code> <p>File size.</p> required Source code in <code>src/afes/profile.py</code> <pre><code>def profile_with_ydata_profiling(\n    df_to_profile: pd.DataFrame, output_path: str | Path, file_name: str, file_size: int\n):\n    \"\"\"Profile dataframe using ydata-profiling and saves ther report to disk.\n\n    Args:\n        df_to_profile (pd.DataFrame): Data to be profiled.\n        output_path (str | Path): Folder to save the report.\n        file_name (str): File name.\n        file_size (int): File size.\n    \"\"\"\n    from ydata_profiling import ProfileReport\n\n    output_path = Path(output_path)\n\n    if file_size &gt; BIG_FILE:\n        profile = ProfileReport(df_to_profile, minimal=True)\n    else:\n        profile = ProfileReport(df_to_profile)\n    report_path = output_path / f\"{file_name}_ydata.html\"\n    profile.to_file(report_path)\n    return\n</code></pre>"}]}